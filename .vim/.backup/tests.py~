from django.test import TestCase
from .registry import AttributeRegistry
from database.access import autojoin
from database.attributes import JEP
from sqlalchemy import select

def all_in_registry(f):
  "Calls `f` for all Attributes in the AttributeRegistry"
  print(f)
  def apply_all_in_registry(test_obj):
    for elem in AttributeRegistry():
      f(test_obj, elem)
  return apply_all_in_registry

class SimpleAttributeTestCase(TestCase):
  "Tests whether simple operations are supported on all Attributes."

  @all_in_registry
  def test_simple_expression(self, attribute):
    """"Tests whether a direct conversion from Attribute to Expression leads to a valid
    query."""
    try:
      components = autojoin(
        "",
        JEP.JOB,
        {'my_expr': attribute}
      )
    except Exception as e:
      self.fail("Compiling expression for {} failed: {}".format(attribute, e))

    try:
      my_qry = select([components['my_expr']]).select_from(components['join_clause'])
    except Exception as e:
      self.fail("Creating query for expression based on {} failed: {}".format(attribute,
                                                                              e))

    # TODO: add check on executing query.
