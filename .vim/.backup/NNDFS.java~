package ndfs.mcndfs_1_naive;

import java.io.File;
import java.io.FileNotFoundException;

import graph.Graph;
import graph.GraphFactory;
import graph.State;
import ndfs.CycleFoundException;
import ndfs.NDFS;
import ndfs.NoCycleFoundException;
import ndfs.ResultException;

import java.util.Collections;
import java.util.Random;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This is a straightforward implementation of Figure 1 of
 * <a href="http://www.cs.vu.nl/~tcs/cm/ndfs/laarman.pdf">
 * "the Laarman paper"</a>.
 *
 * This class should be modified/extended to implement Figure 2 of this paper.
 */
public class NNDFS implements NDFS {

    private final Graph[] graph;
    private Random[] random;
    private Red red;
    private Pink[] pink;
    private Colors[] colors;
    private Counter counter;

    /**
     * Constructs an NDFS object using the specified Promela file.
     *
     * @param promelaFile
     *            the Promela file.
     * @param nrWorkers
     *            the number of worker threads to use.
     * @throws FileNotFoundException
     *             is thrown in case the file could not be read.
     */
    public NNDFS(File promelaFile, int nrWorkers) throws FileNotFoundException {
        graph = new Graph[nrWorkers];
        random = new Random[nrWorkers];
        pink = new Pink[nrWorkers];
        colors = new Colors[nrWorkers];
        red = new Red();
        counter = new Counter();
        
        for (int i = 0; i < nrWorkers; i++){
        	graph[i] = GraphFactory.createGraph(promelaFile);
        	random[i] = new Random(System.nanoTime());
        }
                
    }

    private void dfsRed(State s, int threadID) throws ResultException {
     	pink[threadID].colorPink(s, true);

     	for (State t : graph[threadID].post(s)) {
            if (colors[threadID].hasColor(t, Color.CYAN)) {
                throw new CycleFoundException(threadID);
            } else if (!pink[threadID].isPink(t) && !red.isRed(t)){
                dfsRed(t, threadID);
            }
        }
        
     	if (s.isAccepting()) {
           	counter.decrement(s);
        	counter.waitOnCounter(s);
        }
        
     	red.colorRed(s, true);
        pink[threadID].colorPink(s, false);
    }

    private void dfsBlue(State s, int threadID) throws ResultException {
      	colors[threadID].color(s, Color.CYAN);
  
        List<State> listOfPostStates = graph[threadID].post(s);
        Collections.shuffle(listOfPostStates, random[threadID]);

        for (State t : listOfPostStates) {
            if (colors[threadID].hasColor(t, Color.WHITE) && !red.isRed(t)) {
                dfsBlue(t, threadID);
            }
        }
        if (s.isAccepting()) {
        	counter.increment(s);
        	dfsRed(s, threadID);
        }
        
        colors[threadID].color(s, Color.BLUE);
        
    }

    private void nndfs(State s, int threadID) throws ResultException {
    	pink[threadID] = new Pink();
    	colors[threadID] = new Colors();
    	
        dfsBlue(s, threadID);
        throw new NoCycleFoundException();
    }

    @Override
    public void ndfs() throws ResultException {
    	int threadID = (int) Thread.currentThread().getId();
        nndfs(graph[threadID].getInitialState(), threadID);
    }
}
