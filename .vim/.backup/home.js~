angular.module('kapstok').controller('HomeController', function($state, $scope, $rootScope, Dashboard) {
  $scope.requestedApp = ''; //var to store for which app a request going to be made
  $scope.requestedForApps = []; // var to store for which apps a successful request has been made
 
  $scope.goIfAuthorized = function(state){
    appName = state.split('.')[0];
    if($scope.auth.isAccessible(appName))
      $state.go(state);
    else {
      // open the popup for the right state
      $scope.requestApp(appName);
      $('#popup').addClass('active');
    }
  }

  $scope.commercialSite = {
    url: 'http://www.crunchrapps.com'
  }

  $scope.requestApp = function(newApp){
    $scope.requestedApp = newApp;
  }

  $scope.successfullyRequestedDemo = function(){
    return ($scope.requestedForApps.indexOf($scope.requestedApp) > -1);
  }

  $scope.requestDemo = function(){
    $rootScope.requestDemo($scope.requestedApp).success(
      function(data,status){
        $scope.requestedForApps.push($scope.requestedApp);
      });
  }
  var watchCounter = 0;
  var dashboardAuthWatcher = $scope.$watch('auth.apps', function(data) {
    if(data.length > 0 || watchCounter > 0){
      new Dashboard($scope.auth.apps).start().setupPage('dashboard');

      //unbind watch after creation of the dashboard.
      dashboardAuthWatcher();
    }
    watchCounter++;
  }, true);
});

(function(win, doc, undefined) {
  var Dashboard = function(activeApps) {
    "use strict";
    
    var modules = {
        pages: {},
        ui: {},
        utils: {}
    };

    var log = function(msg) {
      if (win.console) {
        win.console.log(msg);
      }
    };
    
    modules.ui.Part = function(div, angle) {
      var _$div = div;
      var _tween;
      var _partTransitionTimeIn = 0.25;
      var _partTransitionTimeOut = 1;
    
      function intro(distance, t, callback) {
        new TWEEN.Tween({
          x: Math.cos(angle) * distance,
          y: Math.sin(angle) * distance
        })
        .to({
          x: 0,
          y: 0,
        }, t * 1000)
        .easing(TWEEN.Easing.Quartic.Out)
        .onUpdate(function() {
          _$div.css({
            'transform': 'translate3d(' + Number(this.x).toFixed(3) + 'px, ' + Number(this.y).toFixed(3) + 'px, 0)'
          });
        })
        .onComplete(function() {
          if (callback) {
            callback();
          }
        })
        .start();
      }

      function fadeIn() {
        if (_tween) {
          _tween.stop();
        }
        _tween = new TWEEN.Tween({opacity: _$div.css('opacity')})
        .to({opacity: 1}, _partTransitionTimeIn * 1000)
        .easing(TWEEN.Easing.Quartic.Out)
        .onUpdate(onTween)
        .start();
      }

      function fadeOut() {
        if (_tween) {
          _tween.stop();
        }
        _tween = new TWEEN.Tween({opacity: _$div.css('opacity')})
        .to({opacity: 0}, _partTransitionTimeOut * 1000)
        .easing(TWEEN.Easing.Quartic.Out)
        .onUpdate(onTween)
        .start();
      }

      function onTween() {
        _$div.css('opacity', this.opacity);
      }

      return {
        intro  : intro,
        fadeIn  : fadeIn,
        fadeOut  : fadeOut
      };

    };
    
    modules.ui.Wheel = function(options) {

      options = options || {};

      var ImageLoader = modules.utils.ImageLoader;
      var Part = modules.ui.Part;

      var INTRO = 0;
      var SIDE = 1;

      var _$wheel;
      var _$background;
      var _width;
      var _height;
      var _radius;
      var _outerRadius;
      var _centerX;
      var _centerY;
      var _numParts;
      var _startAngle = Math.PI / 2;
      var _wheelOffsetX;
      var _wheelOffsetY;
      var _wheelRadius;
      var _wheelCenter;
      var _parts;
      var _currentIndex;
      var _holeFactor = 0.25;
      var _activeIndices;
      var _onClick = options.onClick;
      var _fadeInTime = 0.85;
      var _translateTime = 0.35;
      var _rollTime = 0.2;
      var _state;
      var _x;
      var _isAnimating = false;
      var _activeIndex;
      var _maskRotation;
      var _maskRotationTime = 0.85;
      var _$mask;

      function init() {
        _parts = [];
        _$wheel = $('#wheel');
        _width = Number(_$wheel.attr('data-width'));
        _height = Number(_$wheel.attr('data-height'));
        _radius = Math.min(_width, _height) / 2;
        _outerRadius = _radius * 2;
        _centerX = _width / 2;
        _centerY = _height / 2;

        _activeIndices = activeApps;
        
        _state = INTRO;
        _numParts = Number(_$wheel.attr('data-parts'));

        new ImageLoader().load(
          [
            _$wheel.attr('data-image-inactive'),
            _$wheel.attr('data-image-inactive-highlight'),
            _$wheel.attr('data-image-active'),
            _$wheel.attr('data-image-active-highlight')
          ],
          onImagesLoaded
        );
      }

      function isActiveIndex(index) {
        for (var i = 0, ii = _activeIndices.length; i < ii; i++) {
          if (_activeIndices[i] === (index + Math.floor(_numParts / 2)) % _numParts) {
            return true;
          }
        }
        return false;
      }

      function onImagesLoaded(images) {
        onResize();
        $(win).resize(onResize);

        addBackground(images[0], images[2]);

        for (var i = 0; i < _numParts; i++) {
          addPartToWheel(getPart(isActiveIndex(i) ? images[3] : images[1], i));
        }

        addMask(200);

        $('#menu .button').each(function(i) {
          $(this).on('click', function() {
            if (_activeIndex === i) {
              return;
            }
            _activeIndex = i;
            $('#menu .button').removeClass('selected');
            $(this).addClass('selected');
            if (_state === INTRO) {
              _state = SIDE;
              _$mask.addClass('active');
              _x = 0;
              _$wheel.css({
                'transform': '',
              });
            }
            rotateMask((_activeIndex + Math.floor(_numParts / 2)) % _numParts);
            _onClick(_activeIndex);
          });
        });

        var $intro = $('#intro');
        new TWEEN.Tween({opacity: 0, y: 50})
        .to({opacity: 1, y: 0}, _fadeInTime * 1000)
        .easing(TWEEN.Easing.Quartic.InOut)
        .onUpdate(function() {
          $intro.css({
            'opacity': Number(this.opacity).toFixed(3),
            'transform': 'translate3d(0,' + Number(this.y).toFixed(3) + 'px,0)'
          });
        })
        .start();

        new TWEEN.Tween({opacity: 0, deg: 30, scale: 0.85})
        .to({opacity: 1, deg: 0, scale: 1}, _fadeInTime * 1000)
        .easing(TWEEN.Easing.Quartic.Out)
        .onUpdate(function() {
          _$wheel.css({
            'opacity': Number(this.opacity).toFixed(3),
            'transform': 'translate3d(' + Number(_x).toFixed(3) + 'px,0,0) scale(' + Number(this.scale).toFixed(3) + ') rotateZ(' + Number(this.deg).toFixed(3) + 'deg)'
          });
        })
        .onComplete(addInteraction)
        .start();

        $.each(_parts, function(i, part) {
          part.intro(_width / 8, _fadeInTime, i !== 0 ? null : function() {
            _$background.css({
              'opacity': 1
            });
            $.each(_parts, function(i, part) {
              part.fadeOut();
            });
          });
        });
      }

      function onResize() {

        if (_state === INTRO) {
          _$wheel.css({
            'transform': null,
          });

          _x = Math.round(($('.container').width() - _$wheel.width()) / 2);

          _$wheel.css({
            'transform': 'translate3d(' + Number(_x).toFixed(3) + 'px,0,0)',
          });
        }

        _$wheel.width('100%');
        var w = Math.floor(_$wheel[0].offsetWidth);
        w = w % 2 === 0 ? w : w - 1; // make even
        _$wheel.width(w).height(w); // height: auto doesn't work in IE

        var offset = _$wheel.offset();
        _wheelOffsetX = offset.left;
        _wheelOffsetY = offset.top;

        _wheelRadius = _$wheel.width() / 2;
        _wheelCenter = _wheelRadius;

      }

      function rotateMask(i, time) {
        var angle = i / _numParts * 360 + 90;
        new TWEEN.Tween({deg: _maskRotation})
        .to({deg: angle}, (time !== undefined ? time : _maskRotationTime) * 1000)
        .easing(TWEEN.Easing.Quartic.InOut)
        .onUpdate(function() {
          _maskRotation = this.deg;
          _$mask.css('transform', 'rotateZ(' + Number(_maskRotation).toFixed(3) + 'deg)');
        })
        .start();
      }

      function addInteraction() {
        _$wheel.on('mouseout', onMouseOut);
        _$wheel.on('mousemove', onMouseMove);
        _$wheel.on('click', function() {
          if (_isAnimating || _currentIndex === undefined) {
            return;
          }
          if (_state === INTRO) {
            _isAnimating = true;
            new TWEEN.Tween({deg: 0})
            .to({deg: 30}, _rollTime * 1000)
            .easing(TWEEN.Easing.Quartic.InOut)
            .onUpdate(function() {
              _$wheel.css('transform', 'translate3d(' + Number(_x + this.deg).toFixed(3) + 'px,0,0) rotateZ(' + Number(this.deg).toFixed(3) + 'deg)');
            })
            .chain(
              new TWEEN.Tween({val: 1, deg: 30})
              .to({val: 0, deg: 0}, _translateTime * 1000)
              .easing(TWEEN.Easing.Quartic.InOut)
              .onUpdate(function() {
                _$wheel.css('transform', 'translate3d(' + Number((_x + 30) * this.val).toFixed(3) + 'px,0,0) rotateZ(' + Number(this.deg).toFixed(3) + 'deg)');
              })
              .onComplete(function() {
                _isAnimating = false;
                _state = SIDE;
                _activeIndex = _currentIndex;
                rotateMask(_activeIndex, 0);
                _$mask.addClass('active');
                _onClick((_activeIndex + Math.floor(_numParts / 2)) % _numParts);
                onResize();
              })
            )
            .start();
          } else {
            if (_activeIndex === _currentIndex) {
              return;
            }
            fadeOutPreviousPart(_activeIndex);
            _activeIndex = _currentIndex;
            rotateMask(_activeIndex);
            _onClick((_activeIndex + Math.floor(_numParts / 2)) % _numParts);
          }
        });
      }

      function onMouseOut() {
        if (_isAnimating) {
          return;
        }

        fadeOutPreviousPart();
        _currentIndex = undefined;
      }

      function onMouseMove(e) {
        if (_isAnimating) {
          return;
        }

        var x = e.pageX - _wheelOffsetX - _wheelCenter;
        var y = e.pageY - _wheelOffsetY - _wheelCenter;
        var distance = Math.sqrt(x * x + y * y);

        if (distance < _holeFactor * _wheelRadius || distance > _wheelRadius) {
          _$wheel.removeClass('inside');
          fadeOutPreviousPart();
          _currentIndex = undefined;
          return;
        }

        _$wheel.addClass('inside');

        var angle = Math.atan2(y, x) + Math.PI;
        angle += _startAngle;
        while (angle > Math.PI * 2) {
          angle -= Math.PI * 2;
        }

        var index = Math.floor(angle / (Math.PI * 2) * _numParts);

        if (index !== _currentIndex) {
          _parts[index].fadeIn();
          fadeOutPreviousPart();
          _currentIndex = index;
        }
      }

      function fadeOutPreviousPart(index) {
        if (index !== undefined) {
          _parts[index].fadeOut();
        } else if (_activeIndex !== _currentIndex && _currentIndex !== undefined) {
          _parts[_currentIndex].fadeOut();
        }
      }

      function getPart(image, index) {
        var arcLength = 1 / _numParts * Math.PI * 2;

        var angle = index / _numParts * Math.PI * 2;
        var x1 = _centerX + Math.cos(_startAngle + angle) * _outerRadius;
        var y1 = _centerY + Math.sin(_startAngle + angle) * _outerRadius;
        var x2 = _centerX + Math.cos(_startAngle + angle + arcLength) * _outerRadius;
        var y2 = _centerY + Math.sin(_startAngle + angle + arcLength) * _outerRadius;

        var canvas = doc.createElement('canvas');
        canvas.width = _width;
        canvas.height = _height;
        var context = canvas.getContext('2d');

        context.beginPath();
        context.moveTo(_centerX, _centerY);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(_centerX, _centerY);
        context.clip();
        context.drawImage(image, 0, 0);

        return {
          canvas: canvas,
          index: index,
        };
      }

      function getPoint(angle, radius, c) {
        return {
          x: c + Math.cos(angle) * radius,
          y: c + Math.sin(angle) * radius
        };
      }

      function addMask(radius) {
        var arcLength = 1 / _numParts * Math.PI * 2;

        var canvas = doc.createElement('canvas');
        canvas.width = radius * 2;
        canvas.height = radius * 2;
        var context = canvas.getContext('2d');

        context.fillStyle = '#14212c';
        context.beginPath();
        context.moveTo(radius, radius);
        context.arc(radius, radius, radius, arcLength, Math.PI * 2);
        context.moveTo(radius, radius);
        var p1 = getPoint(arcLength / 2, radius * 0.875, radius);
        var p2 = getPoint(arcLength, radius / 2, radius);
        var p3 = getPoint(0, radius / 2, radius);
        context.moveTo(p3.x, p3.y);
        context.lineTo(p1.x, p1.y);
        context.lineTo(p2.x, p2.y);
        context.lineTo(p3.x, p3.y);
        context.fill();

        _$mask = $('<div>')
        .addClass('part wheel-mask')
        .css({
          'left': '40%',
          'top': '40%',
          'width': '20%',
          'height': '20%',
          'background-image': 'url(' + canvas.toDataURL('image/png') + ')',
          'background-size': '100% 100%',
        })
        .appendTo('#wheel');
      }

      function addPartToWheel(o) {
        var $div = $('<div>').addClass('part').appendTo('#wheel');
        $div.css({
          'background-image': 'url(' + o.canvas.toDataURL('image/png') + ')',
          'background-size': '100% 100%',
          'width': '100%',
          'height': '100%'
        });

        _parts[o.index] = new Part($div, o.index / _numParts * Math.PI * 2 + Math.PI / 2 + 0.5 / _numParts * Math.PI * 2);
      }

      function addBackground(imageInactive, imageActive) {
        var canvas = doc.createElement('canvas');
        canvas.width = _width;
        canvas.height = _height;

        var context = canvas.getContext('2d');
        context.drawImage(imageInactive, 0, 0);

        for (var i = 0; i < _numParts; i++) {
          if (isActiveIndex(i)) {
            var part = getPart(imageActive, i);
            context.drawImage(part.canvas, 0, 0);
          }
        }

        _$background = $('<div>').appendTo('#wheel');
        _$background.css({
          'width': '100%',
          'height': '100%',
          'background-image': 'url(' + canvas.toDataURL('image/png') + ')',
          'background-size': '100% 100%',
          'opacity': 0
        });
      }

      function isPurchased(index) {
        return isActiveIndex((index + Math.floor(_numParts / 2)) % _numParts);
      }

      init();

      return {
        isPurchased: isPurchased
      };

    };

    /*!

    The MIT License (MIT)

    Copyright (c) 2014 Monokai

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    */

    modules.utils.ActionStack = function(stackSize) {

      // this determines how many actions can be queued
      var _stackSize = stackSize !== undefined ? stackSize : 3;

      var _stack;
      var _previousID;

      function init() {
        _stack = [];
      }

      function reset() {
        _previousID = undefined;
        _stack = [];
      }

      function hash(funk, args) {
        args = args || [];
        var string = funk.toString() + args.join('-');

        // hash the string to take less memory if the function is long (based on Java's hashCode)
        var id = 0;

        if (string.length === 0) {
          return id;
        }

        for (var i = 0; i < string.length; i++) {
          var c = string.charCodeAt(i);
          id = ((id << 5) - id) + c;
          id = id & id; // convert to 32 bit int
        }

        // returns 32 bit integer
        return id;
      }

      function execute(o) {
        // execute the action and store the function ID after that
        o.funk.apply(o, o.args);
        _previousID = o.id;
      }

      function add(funk, args) {
        if (_stackSize !== 0 && _stack.length > _stackSize) {
          return;
        }

        args = args || [];

        var o = {
          id: hash(funk, args),
          funk: funk,
          args: args
        };

        if (_stack.length) {
          // add action to the stack if it's different from the last action on the stack
          if (_stack[_stack.length - 1].id != o.id) {
            _stack.push(o);
          }
        } else {
          // execute the action if it's the first on the stack
          _stack.push(o);
          execute(o);
        }
      }

      function next() {
        if (_stack.length) {
          // remove the first action on the stack and execute the next action
          _stack.shift();
          if (_stack.length) {
            execute(_stack[0]);
          }
        }
      }

      function isPrevious(funk, args) {
        // checks if the previous action is the same
        var id = hash(funk, args === true ? undefined : args);
        return _previousID == id;
      }

      init();

      return {
        add: add,
        next: next,
        isPrevious: isPrevious,
        reset: reset
      };

    };

    modules.utils.ImageLoader = function() {

      var _images = [];
      var _imagesLoaded;
      var _imagesTotal;
      var _callback;

      function load(images, callback) {
        _imagesTotal = images.length;
        _imagesLoaded = 0;
        _callback = callback;

        for (var i = 0; i < _imagesTotal; i++) {
          var image = new Image();
          _images.push(image);

          image.onload = onLoad;
          image.onerror = onError;
          image.src = images[i];
        }
      }

      function onLoad() {
        _imagesLoaded++;
        if (_imagesLoaded >= _imagesTotal) {
          _callback(_images);
        }
      }

      function onError() {
        console.log('error loading image');
      }

      return {
        load: load
      };

    };

    /* jshint forin: false, curly: false, -W093 */

    /**
     * @author sole / http://soledadpenades.com
     * @author mrdoob / http://mrdoob.com
     * @author Robert Eisele / http://www.xarg.org
     * @author Philippe / http://philippe.elsass.me
     * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html
     * @author Paul Lewis / http://www.aerotwist.com/
     * @author lechecacharro
     * @author Josh Faul / http://jocafa.com/
     * @author egraether / http://egraether.com/
     * @author endel / http://endel.me
     * @author Ben Delarre / http://delarre.net
     */

    var TWEEN = TWEEN || (function() {

      var _tweens = [];

      return {
        REVISION: '13',
        getAll: function() {
          return _tweens;
        },
        removeAll: function() {
          _tweens = [];
        },
        add: function(tween) {
          _tweens.push(tween);
        },
        remove: function(tween) {
          var i = _tweens.indexOf(tween);
          if (i !== -1) {
            _tweens.splice(i, 1);
          }
        },
        update: function(time) {
          if (_tweens.length === 0) {
            return false;
          }

          var i = 0;
          // MONOKAI
          time = time !== undefined ? time : (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined ? window.performance.now() : Date.now());

          while (i < _tweens.length) {
            if (_tweens[i].update(time)) {
              i++;
            } else {
              _tweens.splice(i, 1);
            }
          }

          return true;
        }
      };
    })();

    TWEEN.Tween = function(object) {
      var _object = object;
      var _valuesStart = {};
      var _valuesEnd = {};
      var _valuesStartRepeat = {};
      var _duration = 1000;
      var _repeat = 0;
      var _yoyo = false;
      var _isPlaying = false;
      var _reversed = false;
      var _delayTime = 0;
      var _startTime = null;
      var _easingFunction = TWEEN.Easing.Linear.None;
      var _interpolationFunction = TWEEN.Interpolation.Linear;
      var _chainedTweens = [];
      var _onStartCallback = null;
      var _onStartCallbackFired = false;
      var _onUpdateCallback = null;
      var _onCompleteCallback = null;
      var _onStopCallback = null;
      // MONOKAI
      var _paused = false;
      var _pauseStart = null;
      // Set all starting values present on the target object
      for (var field in object) {
        _valuesStart[field] = parseFloat(object[field], 10);
      }
      // MONOKAI
      this.pause = function() {
        if (_paused) {
          return;
        }
        _paused = true;
        _pauseStart = new Date().getTime();
        TWEEN.remove(this);
      };
      // MONOKAI
      this.play = function() {
        if (!_paused) {
          return;
        }
        _paused = false;
        _startTime += new Date().getTime() - _pauseStart;
        TWEEN.add(this);
      };
      this.to = function(properties, duration) {
        if (duration !== undefined) {
          _duration = duration;
        }
        _valuesEnd = properties;
        return this;
      };
      this.start = function(time) {
        TWEEN.add(this);
        _isPlaying = true;
        _onStartCallbackFired = false;
        _startTime = time !== undefined ? time : ( typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined ? window.performance.now() : Date.now() );
        _startTime += _delayTime;
        for (var property in _valuesEnd) {
          // check if an Array was provided as property value
          if (_valuesEnd[property] instanceof Array) {
            if (_valuesEnd[property].length === 0) {
              continue;
            }
            // create a local copy of the Array with the start value at the front
            _valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);
          }
          _valuesStart[property] = _object[property];
          if ((_valuesStart[property] instanceof Array) === false) {
            _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
          }
          _valuesStartRepeat[property] = _valuesStart[property] || 0;
        }
        return this;
      };
      this.stop = function() {
        if (!_isPlaying) {
          return this;
        }
        TWEEN.remove(this);
        _isPlaying = false;
        if (_onStopCallback !== null) {
          _onStopCallback.call(_object);
        }
        this.stopChainedTweens();
        return this;
      };
      this.stopChainedTweens = function() {
        for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
          _chainedTweens[i].stop();
        }
      };
      this.delay = function(amount) {
        _delayTime = amount;
        return this;
      };
      this.repeat = function(times) {
        _repeat = times;
        return this;
      };
      this.yoyo = function(yoyo) {
        _yoyo = yoyo;
        return this;
      };
      this.easing = function(easing) {
        _easingFunction = easing;
        return this;
      };
      this.interpolation = function(interpolation) {
        _interpolationFunction = interpolation;
        return this;
      };
      this.chain = function() {
        _chainedTweens = arguments;
        return this;
      };
      this.onStart = function(callback) {
        _onStartCallback = callback;
        return this;
      };
      this.onUpdate = function(callback) {
        _onUpdateCallback = callback;
        return this;
      };
      this.onComplete = function(callback) {
        _onCompleteCallback = callback;
        return this;
      };
      this.onStop = function(callback) {
        _onStopCallback = callback;
        return this;
      };
      this.update = function(time) {
        var property;
        if (time < _startTime) {
          return true;
        }
        if (_onStartCallbackFired === false) {
          if (_onStartCallback !== null) {
            _onStartCallback.call(_object);
          }
          _onStartCallbackFired = true;
        }
        var elapsed = (time - _startTime) / _duration;
        elapsed = elapsed > 1 ? 1 : elapsed;
        // MONOKAI
        if (Math.abs((time - _startTime) - _duration) < 9) {
          // jumped to elapsed time
          //console.log('tween jumped to end (difference of ' + ((time - _startTime) - _duration) + ')');
          elapsed = 1;
        }
        var value = _easingFunction(elapsed);
        for (property in _valuesEnd) {
          var start = _valuesStart[property] || 0;
          var end = _valuesEnd[property];
          if (end instanceof Array) {
            _object[property] = _interpolationFunction(end, value);
          } else {
            // Parses relative end values with start as base (e.g.: +10, -3)
            if (typeof(end) === 'string') {
              end = start + parseFloat(end, 10);
            }
            // protect against non numeric properties.
            if (typeof(end) === 'number') {
              _object[property] = start + (end - start) * value;
            }
          }
        }
        if (_onUpdateCallback !== null) {
          _onUpdateCallback.call(_object, value);
        }
        if (elapsed == 1) {
          if (_repeat > 0) {
            if (isFinite(_repeat)) {
              _repeat--;
            }
            // reassign starting values, restart by making startTime = now
            for (property in _valuesStartRepeat) {
              if (typeof(_valuesEnd[property]) === 'string') {
                _valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property], 10);
              }
              if (_yoyo) {
                var tmp = _valuesStartRepeat[property];
                _valuesStartRepeat[property] = _valuesEnd[property];
                _valuesEnd[property] = tmp;
              }
              _valuesStart[property] = _valuesStartRepeat[property];
            }
            if (_yoyo) {
              _reversed = !_reversed;
            }
            _startTime = time + _delayTime;
            return true;
          } else {
            if (_onCompleteCallback !== null) {
              _onCompleteCallback.call(_object);
            }
            for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
              _chainedTweens[i].start(time);
            }
            return false;
          }
        }
        return true;
      };
    };

    TWEEN.Easing = {
      Linear: {
        None: function(k) {
          return k;
        }
      },
      Quadratic: {
        In: function(k) {
          return k * k;
        },
        Out: function(k) {
          return k * (2 - k);
        },
        InOut: function(k) {
          if ((k *= 2) < 1) return 0.5 * k * k;
          return -0.5 * (--k * (k - 2) - 1);
        }
      },
      Cubic: {
        In: function(k) {
          return k * k * k;
        },
        Out: function(k) {
          return --k * k * k + 1;
        },
        InOut: function(k) {
          if ((k *= 2) < 1) return 0.5 * k * k * k;
          return 0.5 * ((k -= 2) * k * k + 2);
        }
      },
      Quartic: {
        In: function(k) {
          return k * k * k * k;
        },
        Out: function(k) {
          return 1 - (--k * k * k * k);
        },
        InOut: function(k) {
          if ((k *= 2) < 1) return 0.5 * k * k * k * k;
          return -0.5 * ((k -= 2) * k * k * k - 2);
        }
      },
      Quintic: {
        In: function(k) {
          return k * k * k * k * k;
        },
        Out: function(k) {
          return --k * k * k * k * k + 1;
        },
        InOut: function(k) {
          if ((k *= 2) < 1) return 0.5 * k * k * k * k * k;
          return 0.5 * ((k -= 2) * k * k * k * k + 2);
        }
      },
      Sinusoidal: {
        In: function(k) {
          return 1 - Math.cos(k * Math.PI / 2);
        },
        Out: function(k) {
          return Math.sin(k * Math.PI / 2);
        },
        InOut: function(k) {
          return 0.5 * (1 - Math.cos(Math.PI * k));
        }
      },
      Exponential: {
        In: function(k) {
          return k === 0 ? 0 : Math.pow(1024, k - 1);
        },
        Out: function(k) {
          return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
        },
        InOut: function(k) {
          if (k === 0) return 0;
          if (k === 1) return 1;
          if ((k *= 2) < 1) return 0.5 * Math.pow(1024, k - 1);
          return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
        }
      },
      Circular: {
        In: function(k) {
          return 1 - Math.sqrt(1 - k * k);
        },
        Out: function(k) {
          return Math.sqrt(1 - (--k * k));
        },
        InOut: function(k) {
          if ((k *= 2) < 1) return -0.5 * (Math.sqrt(1 - k * k) - 1);
          return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
        }
      },
      Elastic: {
        In: function(k) {
          var s, a = 0.1,
            p = 0.4;
          if (k === 0) return 0;
          if (k === 1) return 1;
          if (!a || a < 1) {
            a = 1;
            s = p / 4;
          } else s = p * Math.asin(1 / a) / (2 * Math.PI);
          return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
        },
        Out: function(k) {
          var s, a = 0.1,
            p = 0.4;
          if (k === 0) return 0;
          if (k === 1) return 1;
          if (!a || a < 1) {
            a = 1;
            s = p / 4;
          } else s = p * Math.asin(1 / a) / (2 * Math.PI);
          return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);
        },
        InOut: function(k) {
          var s, a = 0.1,
            p = 0.4;
          if (k === 0) return 0;
          if (k === 1) return 1;
          if (!a || a < 1) {
            a = 1;
            s = p / 4;
          } else s = p * Math.asin(1 / a) / (2 * Math.PI);
          if ((k *= 2) < 1) return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
          return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
        }
      },
      Back: {
        In: function(k) {
          var s = 1.70158;
          return k * k * ((s + 1) * k - s);
        },
        Out: function(k) {
          var s = 1.70158;
          return --k * k * ((s + 1) * k + s) + 1;
        },
        InOut: function(k) {
          var s = 1.70158 * 1.525;
          if ((k *= 2) < 1) return 0.5 * (k * k * ((s + 1) * k - s));
          return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
        }
      },
      Bounce: {
        In: function(k) {
          return 1 - TWEEN.Easing.Bounce.Out(1 - k);
        },
        Out: function(k) {
          if (k < (1 / 2.75)) {
            return 7.5625 * k * k;
          } else if (k < (2 / 2.75)) {
            return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
          } else if (k < (2.5 / 2.75)) {
            return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
          } else {
            return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
          }
        },
        InOut: function(k) {
          if (k < 0.5) return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
          return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
        }
      }
    };
    TWEEN.Interpolation = {
      Linear: function(v, k) {
        var m = v.length - 1,
          f = m * k,
          i = Math.floor(f),
          fn = TWEEN.Interpolation.Utils.Linear;
        if (k < 0) return fn(v[0], v[1], f);
        if (k > 1) return fn(v[m], v[m - 1], m - f);
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
      },
      Bezier: function(v, k) {
        var b = 0,
          n = v.length - 1,
          pw = Math.pow,
          bn = TWEEN.Interpolation.Utils.Bernstein,
          i;
        for (i = 0; i <= n; i++) {
          b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
        }
        return b;
      },
      CatmullRom: function(v, k) {
        var m = v.length - 1,
          f = m * k,
          i = Math.floor(f),
          fn = TWEEN.Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
          if (k < 0) i = Math.floor(f = m * (1 + k));
          return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
        } else {
          if (k < 0) return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
          if (k > 1) return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
          return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
        }
      },
      Utils: {
        Linear: function(p0, p1, t) {
          return (p1 - p0) * t + p0;
        },
        Bernstein: function(n, i) {
          var fc = TWEEN.Interpolation.Utils.Factorial;
          return fc(n) / fc(i) / fc(n - i);
        },
        Factorial: (function() {
          var a = [1];
          return function(n) {
            var s = 1,
              i;
            if (a[n]) return a[n];
            for (i = n; i > 1; i--) s *= i;
            return a[n] = s;
          };
        })(),
        CatmullRom: function(p0, p1, p2, p3, t) {
          var v0 = (p2 - p0) * 0.5,
            v1 = (p3 - p1) * 0.5,
            t2 = t * t,
            t3 = t * t2;
          return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
        }
      }
    };

    //= require_tree "./pages"

    modules.pages['dashboard'] = (function() {

      var Wheel    = modules.ui.Wheel;
      var ActionStack  = modules.utils.ActionStack;

      var _$currentInfo;
      var _isAnimating = false;
      var _wheel;
      var _actionStack;
      var _infoTransitionTime = 0.2;
      var _isWindowMin;

      function setup() {
        _actionStack = new ActionStack();
        _wheel = new Wheel({
          onClick: onWheelClick
        });

        $('a.button.purchase').on('click', function() {
          $('#popup').addClass('active');
        });

        //TODO: refactor into proper lightbox once it has been decided upon which one to use
        $('div').on('click', function(event) {
          var target = $( event.target );
          // close the window if a click outside the parent has been made
          var popup = target.parents('.window');
          if(target.hasClass('purchase') || 
             target.hasClass('feature') ||
             target.parents('.feature').length > 0)
            return;
          if(popup.length == 0){
            if($('#popup').hasClass('active'))
              $('#popup').removeClass('active');
          } else {
            console.log('popup.length ' + popup.length + ' != 0');
            if(target.parents('.closePopup').length > 0 || target.hasClass('closePopup')){
              console.log('popup.length ' + popup.length + ' != 0');
              $('#popup').removeClass('active');
            }
          }
        });

        $(win).resize(onResize);
        onResize();
        animate();
      }

      function isWindowMin() {
        return window.getComputedStyle(document.querySelector('#state-indicator'), ':before').getPropertyValue('content') == 'min';
      }

      function onResize() {
        var max = 0;
        $('.info').each(function(i) {
          max = Math.max(max, $(this).outerHeight());
          if (_wheel.isPurchased(i)) {
            $(this).addClass('purchased');
          }
        });
        $('.info-holder').height(max);

        _isWindowMin = isWindowMin();
      }

      function animate() {
        requestAnimationFrame(animate);
        TWEEN.update();
      }

      function showInfo(id) {
        if (_actionStack.isPrevious(showInfo, [id])) {
          _actionStack.next();
          return;
        }

        if (_isWindowMin) {
          _actionStack.reset();
          _isAnimating = false;
        }

        if (_isAnimating) {
          _actionStack.add(showInfo, [id]);
        } else {
          _isAnimating = true;
          if (_$currentInfo) {
            fadeOutInfo(function() {
              _$currentInfo = $('div.info:eq(' + id + ')');
              fadeInInfo();
            });
          } else {
            _$currentInfo = $('div.info:eq(' + id + ')');
            fadeInInfo();
          }
        }
      }

      function fadeInInfo() {
        _$currentInfo.addClass('active');

        if (_isWindowMin) {
          _$currentInfo.css({
            'opacity': 1,
            'transform': 'scale(1)'
          });
          onInfoFadeInComplete();
        } else {
          new TWEEN.Tween({opacity: 0, rotation: -15, x: 50})
          .to({opacity: 1, rotation: 0, x: 0}, _infoTransitionTime * 1000)
          .easing(TWEEN.Easing.Cubic.Out)
          .onUpdate(function() {
            _$currentInfo.css({
              'opacity'  : this.opacity,
              'transform'  : 'rotateY(' + (this.rotation).toFixed(3) + 'deg) translate3d(' + Number(this.x).toFixed(3) + 'px, 0, 0)'
            });
          })
          .onComplete(onInfoFadeInComplete)
          .start();
        }
      }

      function fadeOutInfo(callback) {
        if (_isWindowMin) {
          _$currentInfo.css({
            'opacity': 1,
            'transform': 'scale(1)'
          });
          onInfoFadeOutComplete(callback);
        } else {
          new TWEEN.Tween({opacity: 1, scale: 1})
          .to({opacity: 0, scale: 0.9}, _infoTransitionTime * 1000)
          .easing(TWEEN.Easing.Cubic.Out)
          .onUpdate(function() {
            _$currentInfo.css({
              'opacity': this.opacity,
              'transform': 'scale(' + (this.scale).toFixed(3) + ')'
            });
          })
          .onComplete(function() {
            onInfoFadeOutComplete(callback);
          })
          .start();
        }
      }

      function onInfoFadeInComplete() {
        _isAnimating = false;
        _actionStack.next();
      }

      function onInfoFadeOutComplete(callback) {
        _$currentInfo.removeClass('active');
        _$currentInfo = null;

        if (callback) {
          callback();
        }
      }

      function onWheelClick(index) {
        _actionStack.add(showInfo, [index]);
      }

      return {
        setup: setup
      };

    })();

    // GLOBALS

    modules.Main = (function() {

      function start() {
        return this;
      }

      function setupPage(string) {
        modules.pages[string].setup();
      }

      return {
        start    : start,
        setupPage  : setupPage
      };

    })();

    return {
      'start': modules.Main.start,
      'setupPage': modules.Main.setupPage,
    };
  };

  win['Dashboard'] = Dashboard;
  
  angular.module('kapstok').factory('Dashboard', function() { return Dashboard });

})(window, window.document);
