import cvxopt as co
from kernel import Kernel
import numpy as np
import matplotlib.pyplot as plt
import pprint
import sklearn as sk
from sklearn import grid_search
from svdd import SVDD
from sklearn.utils.estimator_checks import check_estimator
from sklearn.utils import check_array
from sklearn.utils.validation import column_or_1d
import sys
from midpoint_normalize import *
import json
import os

SCORE_MEAN = 'mean'
SCORE_PARAMS = 0
SCORE_FOLDS = 2
N_CS = N_KPARAMS = 30

if len(sys.argv) < 2:
  print('Usage: python ssad_cv.py <k_folds> <input_file> <target_file> <?img_to_dir> <txt_to_file>')

input_json = sys.argv[1]
try:
    save_to_dir = sys.argv[2]
except KeyError:
    save_to_dir = None

with open(input_json) as f:
    scores = json.load(f)

scores = sorted(scores, key=lambda score: (score['params']['C'], score['params']['gamma']))
nums = 30

gammas = set()
Cs = set()
for s in scores:
    gammas.add(s['params']['gamma'])
    Cs.add(s['params']['C'])

param_grid = {
        'gamma': list(sorted(list(gammas))),
        'C': list(sorted(list(Cs)))
        }

# make heatmap plot
f1s = [x[SCORE_MEAN] for x in scores]

f1s = np.array(f1s).reshape(N_CS, N_KPARAMS)

avg = np.average(f1s)

plt.figure(figsize=(8, 6))
plt.imshow(f1s, interpolation='nearest', cmap=plt.cm.hot,
        norm=MidPointNormalize(vmin=0, midpoint=avg))
plt.tight_layout()
plt.xlabel('gamma')
plt.ylabel('C')
plt.colorbar()
xticks = ['{:.5f}'.format(x) for x in param_grid['gamma']]
yticks = ['{:.5f}'.format(x) for x in param_grid['C']]
plt.xticks(np.arange(len(param_grid['gamma'])), xticks , rotation=45)
plt.yticks(np.arange(len(param_grid['C'])), yticks)
plt.title('F1 scores')
plt.tight_layout()

if save_to_dir:
  plt.savefig('{}/{}'.format(save_to_dir, 'f1_heatmap_supervised.pdf'), format='pdf')
else:
  plt.show()

