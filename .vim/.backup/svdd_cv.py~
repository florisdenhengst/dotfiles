import cvxopt as co
from kernel import Kernel
import numpy as np
import matplotlib.pyplot as plt
import pprint
import sklearn as sk
from sklearn import grid_search
from svdd import SVDD
from sklearn.utils.estimator_checks import check_estimator
from sklearn.utils import check_array
from sklearn.utils.validation import column_or_1d
import sys

class SVDD_WRAPPER(sk.base.BaseEstimator,
                   sk.base.ClassifierMixin):
  C = None
  model = None
  k_type = None
  k_param = None
  fitting_data = None

  def __init__(self, k_type='rbf', k_param=1.0, C=.9):
    self.k_type = k_type
    self.k_param = k_param
    self.C = C

  def fit(self, X, y=None):
    X = check_array(X)
    if y is not None:
      y = column_or_1d(y)
      #if len(np.unique(y)) < 2:
      #  msg = "Classifier can't train when only one class is present."
      #  raise ValueError(msg)
    if y is not None and any([X.shape[0] == 0,
            X.shape[1] == 0,
            len(y) != X.shape[0]]):
      msg = '0 feature(s) (shape=(3, 0)) while a minimum of 1 is required.'
      raise ValueError(msg)
    _X = co.matrix(np.transpose(X.astype(float)))
    self.training_dim = len(_X[:,0])
    kernel = Kernel.get_kernel(_X, _X, type=self.k_type, param=self.k_param)
    assert kernel.size[0] > 0
    self.model = SVDD(kernel, self.C)
    result = self.model.train_dual()
    assert result == SVDD.MSG_OK
    self.threshold = self.model.get_threshold()[0]
    assert self.threshold is not None
    assert self.model.get_support_dual() is not None
    kernel = Kernel.get_kernel(_X,
                               _X[:,self.model.get_support_dual()],
                               self.k_type,
                               param=self.k_param)
    assert self.model.get_support_dual() is not None
    self.fitting_data = _X
    return self

  def predict_proba(self, X):
    """gives probabilities for positive (i.e. anomalous class)."""
    X = check_array(X)
    _X = co.matrix(np.transpose(X.astype(float)))
    assert self.fitting_data is not None
    Y = self.fitting_data[:, self.get_support_dual()]
    kernel = Kernel.get_kernel(
        _X,
        Y,
        self.k_type,
        self.k_param)
    assert self.training_dim == len(Y[:,0])
    assert self.training_dim == len(_X[:,0])
    norms = Kernel.get_diag_kernel(_X, self.k_type, self.k_param)
    (pred, msg) = self.model.apply_dual(kernel, norms)
    assert msg == SVDD.MSG_OK
    assert len(pred) == len(X[:,0])
    pred = np.array(pred)
    return pred

  def predict(self, X):
    probs = self.predict_proba(X)[:,0]
    booleans = [p > self.threshold - SVDD.PRECISION for p in probs]
    return booleans

  def get_support_dual(self):
    return self.model.get_support_dual()

K_TYPE = 'rbf'
SKLEARN_CVTUPLE_MEAN = 1
SKLEARN_CVTUPLE_STDEV = 2
SKLEARN_CVTUPLE_PARAMS = 0
TOP_N = 5

if len(sys.argv) < 4:
  print('Usage: python svdd_cv.py <input_file> <target_file> <?save_to_dir>')

co.solvers.options['show_progress'] = False
filename = sys.argv[1]
classes_file = sys.argv[2]
if len(sys.argv) == 4:
  save_to_dir = sys.argv[3]
else:
  save_to_dir = False


data = np.loadtxt(open(filename ,'rb'),
                  delimiter=',')

trues = np.loadtxt(open(classes_file, 'rb'), delimiter=',')[:,1]
trues = np.multiply(trues, -1)
assert len(trues) == len(data[:,0])
assert len(np.unique(trues)) == 2


original_data = data
ds_size = len(data[:,0])

Dtrain = data

c = float('inf')
k_param = .3
param_grid = {
    'k_param': [float(elem) for elem in list(np.logspace(start=-3, stop=3, num=20))],
    'C': [float(elem) for elem in list(np.logspace(start=-3, stop=3, num=20))],
    }

def svdd_auc_pr(estimator, X, y_true):
  probas_pred = estimator.decision_function(X)
  (precision, recall, _) = sk.metrics.precision_recall_curve(y_true, probas_pred)
  auc = sk.metrics.auc(recall, precision)
  return auc

aucs = []
for params in grid_search.ParameterGrid(param_grid):
  estimator = SVDD_WRAPPER(**params)
  fitted = estimator.fit(Dtrain)
  scores = fitted.predict_proba(Dtrain)
  (precision, recall, _) = sk.metrics.precision_recall_curve(trues, scores)
  auc = sk.metrics.auc(recall, precision)
  aucs.append((params, auc, (precision, recall)))

# sort aucs by auc
aucs = sorted(aucs, key=lambda tup: tup[1], reverse=True)

for (thisrange, auc, (precision, recall)) in aucs[0:TOP_N]:
  label = '{}-{}:{:0.4f}'.format(
                                 thisrange['k_param'],
                                 thisrange['C'],
                                 auc)
  plt.plot(recall, precision, label=label)
  plt.legend(loc='upper right')
  plt.xlabel('Recall')
  plt.ylabel('Precision')
  plt.title('PR curves for LOF with various settings of k')
  
# plot aur score
if save_to_dir:
  plt.savefig('{}/{}'.format(save_to_dir, bracket_size))
else:
  plt.show()

exit()

grid = grid_search.GridSearchCV(estimator=SVDD_WRAPPER(),
                                param_grid=param_grid,
                                scoring=svdd_auc_pr,
                                cv=k_folds,
                                error_score=float('-inf'),
                                verbose=False,
                                refit=False,
                                n_jobs=n_parallel
                                )

fit = grid.fit(Dtrain, trues)
scores = sorted(fit.grid_scores_, key=lambda score: score[SKLEARN_CVTUPLE_MEAN])
pprint.pprint(scores2)
