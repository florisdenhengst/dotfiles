import cvxopt as co
from kernel import Kernel
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import pprint
import sklearn as sk
from sklearn import grid_search
from svdd import SVDD
from sklearn.utils.estimator_checks import check_estimator
from sklearn.utils import check_array
from sklearn.utils.validation import column_or_1d
import sys
import json
from midpoint_normalize import MidPointNormalize

K_TYPE = 'rbf'
SKLEARN_CVTUPLE_MEAN = 1
SKLEARN_CVTUPLE_STDEV = 2
SKLEARN_CVTUPLE_PARAMS = 0
N_BEST = 5

if len(sys.argv) < 4:
  print('Usage: python svc_cv.py <k_folds> <n_jobs> <input_file> <target_file> <?save_to_dir>')

co.solvers.options['show_progress'] = False
k_folds = int(sys.argv[1])
n_jobs = int(sys.argv[2])
filename = sys.argv[3]
classes_file = sys.argv[4]
if len(sys.argv) == 6:
  save_to_dir = sys.argv[5]
else:
  save_to_dir = None

if k_folds > 5:
  print('Using k_folds > 5')
  exit()


data = np.loadtxt(open(filename ,'rb'),
                  delimiter=',')

trues = np.loadtxt(open(classes_file, 'rb'), delimiter=',')[:,1]
assert len(trues) == len(data[:,0])
assert len(np.unique(trues)) == 2

original_data = data
ds_size = len(data[:,0])

Dtrain = data

c = float('inf')
k_param = .3
nums = 30
param_grid = {
    'gamma': [float(elem) for elem in list(np.logspace(start=-5, stop=5, num=nums))],
    'C': [float(elem) for elem in list(np.logspace(start=-5, stop=5, num=nums))],
    'probability': [True],
    'class_weight': ['balanced'],
    }


def matthews_corrcoef(estimator, X, y_true):
  predictions = estimator.predict(X)
  score = sk.metrics.matthews_corrcoef(y_true, predictions)
  return score

def svc_f1(estimator, X, y_true):
  predictions = estimator.predict(X)
  f1 = sk.metrics.f1_score(y_true, predictions, pos_label=-1)
  return f1

def svc_auc_pr(estimator, X, y_true):
  probas_pred = estimator.decision_function(X)
  (precision, recall, _) = sk.metrics.precision_recall_curve(y_true,
          probas_pred, pos_label=-1)
  auc = sk.metrics.auc(recall, precision)
  return auc

grid = grid_search.GridSearchCV(estimator=sk.svm.SVC(),
                                param_grid=param_grid,
                                cv=k_folds,
                                refit=False,
                                scoring=matthews_corrcoef,
                                n_jobs=n_jobs,
                                )

fit = grid.fit(Dtrain, trues)
scores = sorted(fit.grid_scores_, key=lambda score: score[SKLEARN_CVTUPLE_MEAN],
        reverse=True)

SCORE_MEAN = 1
SCORE_PARAMS = 0
SCORE_FOLDS = 2
scores = [{'mean': score[SCORE_MEAN],
           'params':score[SCORE_PARAMS],
           'std': np.std(score[SCORE_FOLDS])} for score in scores]

dump = json.dumps(scores, indent=2, sort_keys=True)
print(dump)

# make heatmap plot
f1s = [x[SCORE_MEAN] for x in grid.grid_scores_]
f1s = np.array(f1s).reshape(len(param_grid['C']), len(param_grid['gamma']))

plt.figure(figsize=(8, 6))
plt.imshow(f1s, interpolation='nearest', cmap=plt.cm.hot,
        norm=MidPointNormalize(np.min(f1s), midpoint=np.average(f1s)))
plt.tight_layout()
plt.xlabel('gamma')
plt.ylabel('C')
plt.colorbar()
xticks = ['{:.4f}'.format(x) for x in param_grid['gamma']]
yticks = ['{:.4f}'.format(x) for x in param_grid['C']]
plt.xticks(np.arange(len(param_grid['gamma'])), xticks , rotation=45)
plt.yticks(np.arange(len(param_grid['C'])), yticks)
plt.title('F1 scores')
plt.tight_layout()

if save_to_dir:
  plt.savefig('{}/{}'.format(save_to_dir, 'f1_heatmap.pdf'), format='pdf')
else:
  plt.show()

